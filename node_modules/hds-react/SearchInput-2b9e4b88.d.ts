/// <reference types="react" />
import React from "react";
import { DependencyList } from "react";
declare const LOADING_SPINNER_TIMEOUT = 3000;
declare const useShowLoadingSpinner: (isLoading: boolean, timeoutValue?: number) => boolean;
type GetSuggestionsFunction<SuggestionItemType> = (searchString: string) => Promise<SuggestionItemType[]>;
declare const SUGGESTIONS_DEBOUNCE_VALUE = 200;
declare const useSuggestions: <SuggestionItemType>(searchString: string, getSuggestions: GetSuggestionsFunction<SuggestionItemType>, isSubmitted: boolean) => {
    suggestions: SuggestionItemType[];
    isLoading: boolean;
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
type EffectFunction = (...args: any[]) => any;
declare const useDebouncedEffect: (effect: EffectFunction, delay: number, deps: DependencyList) => void;
/**
 * Cancellable promise wrapper
 */
declare const cancellablePromise: <ReturnType_1>(promise: Promise<ReturnType_1>) => {
    promise: Promise<ReturnType_1>;
    cancel: () => void;
};
type SearchInputProps<SuggestionItem> = {
    /**
     * Additional class names to add to the component
     */
    className?: string;
    /**
     * The aria-label for the clear button.
     * @default Clear
     */
    clearButtonAriaLabel?: string;
    /**
     * Callback function fired every time the input content changes. Receives the input value as a parameter. Must return a promise which resolves to an array of SuggestionItems.
     */
    getSuggestions?: GetSuggestionsFunction<SuggestionItem>;
    /**
     * The helper text content that will be shown below the input
     */
    helperText?: string;
    /**
     * Should the matching part of a suggestion be highlighted.
     * @default true
     */
    highlightSuggestions?: boolean;
    /**
     * The label for the search field
     */
    label: React.ReactNode;
    /**
     * Text to show for screen readers when loading spinner is no longer visible.
     * @default "Finished loading suggestions"
     */
    loadingSpinnerFinishedText?: string;
    /**
     * Text to show for screen readers when loading spinner is visible.
     * @default "Loading suggestions"
     */
    loadingSpinnerText?: string;
    /**
     * Callback function fired after search is triggered.
     */
    onSubmit: (value: string) => void;
    /**
     * The aria-label for the search button.
     * @default Search
     */
    searchButtonAriaLabel?: string;
    /**
     * Override or extend the styles applied to the component
     */
    style?: React.CSSProperties;
    /**
     * Field of the SuggestionItem that represents the item label.
     * E.g. an `suggestionLabelField` value of `'foo'` and a suggestion item `{ foo: 'Label', bar: 'value' }`, would display `'Label'` in the menu for that specific suggestion.
     */
    suggestionLabelField?: keyof SuggestionItem;
    /**
     * The number of suggestions that are visible in the menu before it becomes scrollable.
     * @default 8
     */
    visibleSuggestions?: number;
};
declare const SearchInput: <SuggestionItem>({ className, clearButtonAriaLabel, getSuggestions, helperText, highlightSuggestions, label, loadingSpinnerFinishedText, loadingSpinnerText, onSubmit, searchButtonAriaLabel, style, suggestionLabelField, visibleSuggestions, }: SearchInputProps<SuggestionItem>) => JSX.Element;
export { LOADING_SPINNER_TIMEOUT, useShowLoadingSpinner, GetSuggestionsFunction, SUGGESTIONS_DEBOUNCE_VALUE, useSuggestions, useDebouncedEffect, cancellablePromise, SearchInputProps, SearchInput };
