/// <reference types="react" />
import React from "react";
import { MouseEvent, Dispatch } from "react";
import { RectReadOnly } from "react-use-measure";
import { MergeElementProps } from "./types-7f57039c";
import { LogoLanguage } from "./components/Logo/index";
declare const useMobile: () => boolean;
type MenuButtonProps = React.PropsWithChildren<{
    /**
     * aria-label for the dropdown toggle button
     */
    buttonAriaLabel?: string;
    /**
     * Additional class names to apply to the dropdown
     */
    className?: string;
    /**
     * Should the menu close after item is clicked
     */
    closeOnItemClick?: boolean;
    /**
     * Used to generate the first part of the id on the elements
     */
    id?: string;
    /**
     * Icon to be displayed in the dropdown
     */
    icon?: React.ReactNode;
    /**
     * Label for the dropdown
     */
    label: React.ReactNode;
    /**
     * Spacing between the toggle button and the menu
     */
    menuOffset?: number;
}>;
type NavigationDropdownProps = MenuButtonProps & {
    /**
     * If `true`, the item will be marked as active
     */
    active?: boolean;
};
declare const NavigationDropdown: {
    ({ label, children, ...rest }: NavigationDropdownProps): JSX.Element;
    componentName: string;
};
declare const NavigationLanguageSelector: {
    ({ children$0, id, label$0, ...rest$0 }: MenuButtonProps): JSX.Element;
    componentName: string;
};
type NavigationSearchProps = {
    /**
     * Callback fired when the search field is blurred
     */
    onBlur?: () => void;
    /**
     * Callback fired when the search field is focused
     */
    onFocus?: () => void;
    /**
     * Callback fired when the search button or Enter key is pressed
     */
    onSearch?: (inputValue: string, event: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<HTMLInputElement>) => void;
    /**
     * Callback fired when the search input value is changed
     */
    onSearchChange?: (inputValue: string, event: React.ChangeEvent<HTMLInputElement>) => void;
    /**
     * The aria-label for the search button. Uses `searchLabel` by default
     */
    searchButtonAriaLabel?: string;
    /**
     * Label shown when search field isn't active
     */
    searchLabel: string;
    /**
     * Placeholder text shown in the search input field. Uses the `searchLabel` value by default
     */
    searchPlaceholder?: string;
};
declare const NavigationSearch: {
    ({ onBlur, onFocus, onSearchChange, onSearch, searchButtonAriaLabel, searchLabel, searchPlaceholder }: NavigationSearchProps): JSX.Element;
    componentName: string;
};
type NavigationUserProps = MenuButtonProps & {
    /**
     * Flag for whether the user is authenticated
     */
    authenticated?: boolean;
    /**
     * Label for the "Sign in" button
     */
    label: React.ReactNode;
    /**
     * Callback fired when the "Sign in" button is clicked
     */
    onSignIn?: () => void;
    /**
     * Name of the user displayed in the dropdown
     */
    userName?: React.ReactNode;
};
declare const NavigationUser: {
    ({ authenticated, children$1, id$0, label$1, onSignIn, userName, ...dropdownProps }: NavigationUserProps): JSX.Element;
    componentName: string;
};
type MenuProps = React.ComponentPropsWithoutRef<"div"> & {
    menuContainerSize: RectReadOnly;
    menuOffset?: number;
    menuOpen: boolean;
    onItemClick?: (event: MouseEvent<HTMLElement>) => void;
};
declare const Menu: ({ children, menuContainerSize, menuOffset, menuOpen, onItemClick, ...rest }: MenuProps) => JSX.Element;
declare const NavigationActions: {
    ({ children$2 }: React.PropsWithChildren<{}>): JSX.Element;
    componentName: string;
};
type ItemProps = {
    /**
     * If `true`, the item will be marked as active
     */
    active?: boolean;
    /**
     * Icon placed on the left side of the item label
     */
    icon?: React.ReactNode;
    /**
     * The label for the item. Optionally, children can be passed
     */
    label?: React.ReactNode;
    /**
     * Defines the button variant in mobile view. Intended to be used within the `NavigationUser` component
     */
    variant?: "primary" | "secondary";
};
type SupplementaryItemProps = Omit<ItemProps, "variant"> & {
    variant: "supplementary";
    icon: React.ReactNode;
};
type NavigationItemProps<Element extends React.ElementType = "a"> = {
    /**
     * Element type
     */
    as?: Element;
} & MergeElementProps<Element, ItemProps | SupplementaryItemProps>;
declare const NavigationItem: {
    <T extends React.ElementType<any> = "a">({ active, as, children$3, className, icon, label$2, variant, ...rest$1 }: NavigationItemProps<T>): JSX.Element;
    defaultProps: {
        as: string;
    };
};
type NavigationReducerAction = {
    type: "AUTHENTICATED";
    value: boolean;
} | {
    type: "NAVIGATION_ROW";
    value: NavigationVariant;
};
type NavigationVariant = "default" | "inline";
type NavigationTheme = "light" | "dark" | NavigationCustomTheme;
interface NavigationCustomTheme {
    "--header-background-color"?: string;
    "--header-color"?: string;
    "--header-divider-color"?: string;
    "--header-focus-outline-color"?: string;
    "--mobile-menu-background-color"?: string;
    "--mobile-menu-color"?: string;
    "--navigation-row-background-color"?: string;
    "--navigation-row-color"?: string;
    "--navigation-row-focus-outline-color"?: string;
}
type NavigationRowProps = React.PropsWithChildren<{
    /**
     * Defines where the navigation row will be displayed.
     * Supported values:
     *
     * `default` - items will be displayed beneath the header
     *
     * `inline` - items will be displayed in the header
     */
    variant?: NavigationVariant;
}>;
declare const NavigationRow: {
    ({ variant$0, children$4 }: NavigationRowProps): JSX.Element;
    componentName: string;
};
type NavigationContextProps = {
    /**
     * Flag for whether the mobile view is active
     */
    isMobile?: boolean;
    /**
     * dispatch method that is passed down to children
     */
    dispatch?: Dispatch<NavigationReducerAction>;
};
declare const NavigationContext: import("react").Context<NavigationContextProps>;
type NavigationProps = React.PropsWithChildren<{
    /**
     * Additional class names to apply to the navigation
     */
    className?: string;
    /**
     * If `true`, the navigation will be fixed to the top of the page
     * @default false
     */
    fixed?: boolean;
    /**
     * ID of the header element
     */
    id?: string;
    /**
     * The language of the Helsinki-logo
     * @default 'fi'
     */
    logoLanguage?: LogoLanguage;
    /**
     * Sets whether the mobile menu is open. Used together with the `onMenuToggle` prop to override the internal state handling
     * @default false
     */
    menuOpen?: boolean;
    /**
     * aria-label for the mobile menu toggle button
     */
    menuToggleAriaLabel: string;
    /**
     * Callback fired when the mobile menu is toggled. Can be used together with the `menuOpen` prop to override the internal state handling
     */
    onMenuToggle?: () => void;
    /**
     * Callback fired when the title or logo is clicked
     */
    onTitleClick?: () => void;
    /**
     * ID of the element to jump to when the "skip to content" accessibility shortcut is clicked
     */
    skipTo: string;
    /**
     * aria-label for the "skip to content" accessibility shortcut
     */
    skipToContentAriaLabel?: string;
    /**
     * Text for the "skip to content" accessibility shortcut
     */
    skipToContentLabel: React.ReactNode;
    /**
     * Defines the navigation theme
     * @default 'white'
     */
    theme?: NavigationTheme;
    /**
     * The title of the service shown next to the logo
     */
    title?: React.ReactNode;
    /**
     * The aria-label for the title describing the logo and service to screen reader users
     */
    titleAriaLabel?: React.ReactNode;
    /**
     * URL to navigate to when the logo or title is clicked
     */
    titleUrl?: string;
}>;
declare const Navigation: {
    ({ children$5, className$0, fixed, id$1, logoLanguage, menuOpen, menuToggleAriaLabel, onMenuToggle, onTitleClick, skipTo, skipToContentAriaLabel, skipToContentLabel, theme, title, titleAriaLabel, titleUrl, }: NavigationProps): JSX.Element;
    Actions: {
        ({ children$6 }: {
            children?: React.ReactNode;
        }): JSX.Element;
        componentName: string;
    };
    Dropdown: {
        ({ label$3, children$7, ...rest$2 }: NavigationDropdownProps): JSX.Element;
        componentName: string;
    };
    Item: {
        <T extends React.ElementType<any> = "a">({ active, as, children$8, className$1, icon, label$4, variant$1, ...rest$3 }: NavigationItemProps<T>): JSX.Element;
        defaultProps: {
            as: string;
        };
    };
    LanguageSelector: {
        ({ children$9, id$2, label$5, ...rest$4 }: React.PropsWithChildren<{
            buttonAriaLabel?: string;
            className?: string;
            closeOnItemClick?: boolean;
            id?: string;
            icon?: React.ReactNode;
            label: React.ReactNode;
            menuOffset?: number;
        }>): JSX.Element;
        componentName: string;
    };
    Row: {
        ({ variant$2, children$10 }: React.PropsWithChildren<{
            variant?: NavigationVariant;
        }>): JSX.Element;
        componentName: string;
    };
    Search: {
        ({ onBlur, onFocus, onSearchChange, onSearch, searchButtonAriaLabel, searchLabel, searchPlaceholder, }: NavigationSearchProps): JSX.Element;
        componentName: string;
    };
    User: {
        ({ authenticated, children$11, id$3, label$6, onSignIn, userName, ...dropdownProps }: NavigationUserProps): JSX.Element;
        componentName: string;
    };
};
export { useMobile, NavigationDropdownProps, NavigationDropdown, NavigationLanguageSelector, NavigationSearchProps, NavigationSearch, NavigationUserProps, NavigationUser, Menu, NavigationActions, NavigationItemProps, NavigationItem, NavigationRowProps, NavigationRow, NavigationContextProps, NavigationContext, NavigationProps, Navigation };
