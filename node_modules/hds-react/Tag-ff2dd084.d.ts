/// <reference types="react" />
import React from 'react';
interface TagCustomTheme {
    '--tag-background'?: string;
    '--tag-color'?: string;
    '--tag-focus-outline-color'?: string;
}
type TagProps = {
    /**
     * The label for the tag
     */
    children: React.ReactNode;
    /**
     * Additional class names to apply to the tag
     */
    className?: string;
    /**
     * The aria-label for the delete button
     */
    deleteButtonAriaLabel?: string;
    /**
     * Props that will be passed to the delete button `<button>` element.
     */
    deleteButtonProps?: React.ComponentPropsWithoutRef<'button'>;
    /**
     * Used to generate the first part of the id on the elements.
     */
    id?: string;
    /**
     * Props that will be passed to the label `<span>` element.
     */
    labelProps?: React.ComponentPropsWithoutRef<'span'>;
    /**
     * Callback function fired when the tag is clicked. If set, the tag will be clickable.
     */
    onClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent> | React.KeyboardEvent<HTMLDivElement>) => void;
    /**
     * Callback function fired when the delete icon is clicked. If set, a delete button will be shown.
     */
    onDelete?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
    /**
     * Sets the role of the tag when it's clickable. Uses 'link' by default.
     */
    role?: 'link' | 'button';
    /**
     * Label that is only visible to screen readers. Can be used to to give screen reader users additional information about the tag.
     */
    srOnlyLabel?: string;
    /**
     * Custom theme styles
     */
    theme?: TagCustomTheme;
};
declare const Tag: React.ForwardRefExoticComponent<TagProps & React.RefAttributes<HTMLDivElement>>;
export { TagCustomTheme, TagProps, Tag };
