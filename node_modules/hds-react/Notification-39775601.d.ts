/// <reference types="react" />
import React from 'react';
type NotificationType = 'info' | 'error' | 'alert' | 'success';
type NotificationSizeInline = 'default' | 'small' | 'large';
type NotificationSizeToast = Exclude<NotificationSizeInline, 'large'>;
type NotificationPosition = 'inline' | 'top-left' | 'top-center' | 'top-right' | 'bottom-left' | 'bottom-center' | 'bottom-right';
type CommonProps = React.PropsWithChildren<{
    /**
     * Whether the notification should be closed automatically after a certain time
     * @default false
     */
    autoClose?: boolean;
    /**
     * The duration before the notification is automatically closed. Used together with the `autoClose` prop.
     * @default 6000
     */
    autoCloseDuration?: number;
    /**
     * Additional class names to apply to the notification
     */
    className?: string;
    /**
     * Duration of the close fade-out animation
     * @default 85
     */
    closeAnimationDuration?: number;
    /**
     * Value for the data-testid attribute that is applied to the root component.
     */
    dataTestId?: string;
    /**
     * Displays a progress bar on top of the notification when `true`
     * @default true
     */
    displayAutoCloseProgress?: boolean;
    /**
     * Determines whether the notification should be visually hidden. Useful when notification should only be "seen" by screen readers.
     * @default false
     */
    invisible?: boolean;
    /**
     * The label of the notification.
     * Note: Labels are not displayed visually for small notifications, but they are still accessible to assistive technology. This could be used to help screen reader users to better understand the context of the notification.
     */
    label?: string | React.ReactNode;
    /**
     * Callback fired when the notification is closed
     */
    onClose?: () => void;
    /**
     * Override or extend the styles applied to the component
     */
    style?: React.CSSProperties;
    /**
     * The type of the notification
     * @default 'info'
     */
    type?: NotificationType;
}>;
type PositionAndSize = {
    position?: 'inline';
    size?: NotificationSizeInline;
} | {
    /**
     * The position of the notification
     */
    position?: NotificationPosition;
    /**
     * The size of the notification
     */
    size?: NotificationSizeToast;
};
type Dismissible = {
    dismissible?: false;
    closeButtonLabelText?: string;
} | {
    /**
     * Whether the notification can be closed
     * @default false
     */
    dismissible?: boolean;
    /**
     * The aria-label and title for the close button
     */
    closeButtonLabelText: string;
};
type NotificationProps = CommonProps & PositionAndSize & Dismissible;
declare const Notification: React.ForwardRefExoticComponent<({
    /**
     * Whether the notification should be closed automatically after a certain time
     * @default false
     */
    autoClose?: boolean;
    /**
     * The duration before the notification is automatically closed. Used together with the `autoClose` prop.
     * @default 6000
     */
    autoCloseDuration?: number;
    /**
     * Additional class names to apply to the notification
     */
    className?: string;
    /**
     * Duration of the close fade-out animation
     * @default 85
     */
    closeAnimationDuration?: number;
    /**
     * Value for the data-testid attribute that is applied to the root component.
     */
    dataTestId?: string;
    /**
     * Displays a progress bar on top of the notification when `true`
     * @default true
     */
    displayAutoCloseProgress?: boolean;
    /**
     * Determines whether the notification should be visually hidden. Useful when notification should only be "seen" by screen readers.
     * @default false
     */
    invisible?: boolean;
    /**
     * The label of the notification.
     * Note: Labels are not displayed visually for small notifications, but they are still accessible to assistive technology. This could be used to help screen reader users to better understand the context of the notification.
     */
    label?: string | React.ReactNode;
    /**
     * Callback fired when the notification is closed
     */
    onClose?: () => void;
    /**
     * Override or extend the styles applied to the component
     */
    style?: React.CSSProperties;
    /**
     * The type of the notification
     * @default 'info'
     */
    type?: NotificationType;
} & {
    children?: React.ReactNode;
} & {
    position?: 'inline';
    size?: NotificationSizeInline;
} & {
    dismissible?: false;
    closeButtonLabelText?: string;
} & React.RefAttributes<HTMLDivElement>) | ({
    /**
     * Whether the notification should be closed automatically after a certain time
     * @default false
     */
    autoClose?: boolean;
    /**
     * The duration before the notification is automatically closed. Used together with the `autoClose` prop.
     * @default 6000
     */
    autoCloseDuration?: number;
    /**
     * Additional class names to apply to the notification
     */
    className?: string;
    /**
     * Duration of the close fade-out animation
     * @default 85
     */
    closeAnimationDuration?: number;
    /**
     * Value for the data-testid attribute that is applied to the root component.
     */
    dataTestId?: string;
    /**
     * Displays a progress bar on top of the notification when `true`
     * @default true
     */
    displayAutoCloseProgress?: boolean;
    /**
     * Determines whether the notification should be visually hidden. Useful when notification should only be "seen" by screen readers.
     * @default false
     */
    invisible?: boolean;
    /**
     * The label of the notification.
     * Note: Labels are not displayed visually for small notifications, but they are still accessible to assistive technology. This could be used to help screen reader users to better understand the context of the notification.
     */
    label?: string | React.ReactNode;
    /**
     * Callback fired when the notification is closed
     */
    onClose?: () => void;
    /**
     * Override or extend the styles applied to the component
     */
    style?: React.CSSProperties;
    /**
     * The type of the notification
     * @default 'info'
     */
    type?: NotificationType;
} & {
    children?: React.ReactNode;
} & {
    position?: 'inline';
    size?: NotificationSizeInline;
} & {
    /**
     * Whether the notification can be closed
     * @default false
     */
    dismissible?: boolean;
    /**
     * The aria-label and title for the close button
     */
    closeButtonLabelText: string;
} & React.RefAttributes<HTMLDivElement>) | ({
    /**
     * Whether the notification should be closed automatically after a certain time
     * @default false
     */
    autoClose?: boolean;
    /**
     * The duration before the notification is automatically closed. Used together with the `autoClose` prop.
     * @default 6000
     */
    autoCloseDuration?: number;
    /**
     * Additional class names to apply to the notification
     */
    className?: string;
    /**
     * Duration of the close fade-out animation
     * @default 85
     */
    closeAnimationDuration?: number;
    /**
     * Value for the data-testid attribute that is applied to the root component.
     */
    dataTestId?: string;
    /**
     * Displays a progress bar on top of the notification when `true`
     * @default true
     */
    displayAutoCloseProgress?: boolean;
    /**
     * Determines whether the notification should be visually hidden. Useful when notification should only be "seen" by screen readers.
     * @default false
     */
    invisible?: boolean;
    /**
     * The label of the notification.
     * Note: Labels are not displayed visually for small notifications, but they are still accessible to assistive technology. This could be used to help screen reader users to better understand the context of the notification.
     */
    label?: string | React.ReactNode;
    /**
     * Callback fired when the notification is closed
     */
    onClose?: () => void;
    /**
     * Override or extend the styles applied to the component
     */
    style?: React.CSSProperties;
    /**
     * The type of the notification
     * @default 'info'
     */
    type?: NotificationType;
} & {
    children?: React.ReactNode;
} & {
    /**
     * The position of the notification
     */
    position?: NotificationPosition;
    /**
     * The size of the notification
     */
    size?: NotificationSizeToast;
} & {
    dismissible?: false;
    closeButtonLabelText?: string;
} & React.RefAttributes<HTMLDivElement>) | ({
    /**
     * Whether the notification should be closed automatically after a certain time
     * @default false
     */
    autoClose?: boolean;
    /**
     * The duration before the notification is automatically closed. Used together with the `autoClose` prop.
     * @default 6000
     */
    autoCloseDuration?: number;
    /**
     * Additional class names to apply to the notification
     */
    className?: string;
    /**
     * Duration of the close fade-out animation
     * @default 85
     */
    closeAnimationDuration?: number;
    /**
     * Value for the data-testid attribute that is applied to the root component.
     */
    dataTestId?: string;
    /**
     * Displays a progress bar on top of the notification when `true`
     * @default true
     */
    displayAutoCloseProgress?: boolean;
    /**
     * Determines whether the notification should be visually hidden. Useful when notification should only be "seen" by screen readers.
     * @default false
     */
    invisible?: boolean;
    /**
     * The label of the notification.
     * Note: Labels are not displayed visually for small notifications, but they are still accessible to assistive technology. This could be used to help screen reader users to better understand the context of the notification.
     */
    label?: string | React.ReactNode;
    /**
     * Callback fired when the notification is closed
     */
    onClose?: () => void;
    /**
     * Override or extend the styles applied to the component
     */
    style?: React.CSSProperties;
    /**
     * The type of the notification
     * @default 'info'
     */
    type?: NotificationType;
} & {
    children?: React.ReactNode;
} & {
    /**
     * The position of the notification
     */
    position?: NotificationPosition;
    /**
     * The size of the notification
     */
    size?: NotificationSizeToast;
} & {
    /**
     * Whether the notification can be closed
     * @default false
     */
    dismissible?: boolean;
    /**
     * The aria-label and title for the close button
     */
    closeButtonLabelText: string;
} & React.RefAttributes<HTMLDivElement>)>;
export { NotificationType, NotificationSizeInline, NotificationSizeToast, NotificationPosition, NotificationProps, Notification };
