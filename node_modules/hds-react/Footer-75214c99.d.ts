/// <reference types="react" />
import React from "react";
import { MergeElementProps } from "./types-7f57039c";
import { FooterNavigationVariant, FooterReducerAction, FooterTheme } from "./Footer.interface-254b5ff7";
import { LogoLanguage } from "./components/Logo/index";
import { KorosType } from "./components/Koros/index";
type FooterBaseProps = React.PropsWithChildren<{
    /**
     * Text to be displayed next to the copyright symbol
     */
    copyrightHolder?: React.ReactNode;
    /**
     * Text to be displayed after the copyright holder text
     */
    copyrightText?: React.ReactNode;
}>;
declare const FooterBase: ({ children, copyrightHolder, copyrightText }: FooterBaseProps) => JSX.Element;
type FooterSoMeProps = React.PropsWithChildren<{
    /**
     * Props that will be passed to the native `<section>` element.
     * Can be used to pass aria attributes that describes the SoMe section to screen reader users.
     */
    soMeSectionProps?: React.ComponentPropsWithoutRef<"section">;
}>;
declare const FooterSoMe: {
    ({ children, soMeSectionProps }: FooterSoMeProps): JSX.Element;
    componentName: string;
};
type FooterUtilitiesProps = React.PropsWithChildren<{
    /**
     * Label for the "Back to top" button
     */
    backToTopLabel?: string | React.ReactNode;
    /**
     * Callback fired when the "Back to top" button is clicked
     */
    onBackToTopClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;
    /**
     * Whether the "Back to top" button should be shown
     */
    showBackToTopButton?: boolean;
}>;
declare const FooterUtilities: ({ children, backToTopLabel, onBackToTopClick, showBackToTopButton }: FooterUtilitiesProps) => JSX.Element;
declare const _default: (element?: Document) => HTMLElement[];
type ItemProps<Element> = React.PropsWithChildren<{
    /**
     * Element type
     */
    as?: Element;
    /**
     * Icon placed on the left side of the item label
     */
    icon?: React.ReactNode;
    /**
     * The label for the item. Optionally, children can be passed
     */
    label?: string | React.ReactNode;
    /**
     * Whether the item should be displayed as an sub item in a sitemap item group
     */
    subItem?: boolean;
}>;
type FooterItemProps<Element extends React.ElementType = "a"> = MergeElementProps<Element, ItemProps<Element>>;
declare const FooterItem: {
    <T extends React.ElementType<any> = "a">({ as, children$0, className, icon, label, subItem, ...rest }: MergeElementProps<T, React.PropsWithChildren<{
        as?: T;
        icon?: React.ReactNode;
        label?: string | React.ReactNode;
        subItem?: boolean;
    }>>): JSX.Element;
    defaultProps: {
        as: string;
    };
};
declare const FooterItemGroup: ({ children }: React.PropsWithChildren<{}>) => JSX.Element;
type FooterNavigationProps = React.PropsWithChildren<{
    /**
     * The aria-label for the `<nav>` element. Describes the navigation to screen reader users.
     */
    navigationAriaLabel?: string;
    /**
     * Defines how the navigation items will be displayed in the footer
     *
     * Supported values:
     *
     * `default` - Items will be displayed beneath the logo and title
     *
     * `minimal` - Items will be displayed inline with the logo and title. Intended to be used with 4 items or less.
     *
     * `sitemap` - Items will be displayed beneath the logo and title as groups with items and sub-items...
     */
    variant?: FooterNavigationVariant;
}>;
declare const FooterNavigation: {
    ({ children$1, navigationAriaLabel, variant }: FooterNavigationProps): JSX.Element;
    componentName: string;
};
type FooterContextProps = {
    /**
     * dispatch method that is passed down to children
     */
    dispatch?: React.Dispatch<FooterReducerAction>;
};
declare const FooterContext: React.Context<FooterContextProps>;
type FooterProps = React.PropsWithChildren<{
    /**
     * Additional class names to apply to the footer
     */
    className?: string;
    /**
     * Props that will be passed to the native `<footer>` element
     */
    footerProps?: React.ComponentPropsWithoutRef<'footer'>;
    /**
     * Koros type to use in the footer
     */
    korosType?: KorosType;
    /**
     * The language of the Helsinki-logo
     * @default 'fi'
     */
    logoLanguage?: LogoLanguage;
    /**
     * Defines the footer theme
     */
    theme?: FooterTheme;
    /**
     * The title of the service shown next to the logo
     */
    title?: React.ReactNode;
}>;
declare const Footer: {
    ({ children$2, className$0, footerProps, korosType, logoLanguage, theme, title, }: FooterProps): JSX.Element;
    Navigation: {
        ({ children$3, navigationAriaLabel, variant }: React.PropsWithChildren<{
            navigationAriaLabel?: string;
            variant?: import("./Footer.interface-254b5ff7").FooterNavigationVariant;
        }>): JSX.Element;
        componentName: string;
    };
    ItemGroup: ({ children }: {
        children?: React.ReactNode;
    }) => JSX.Element;
    Item: {
        <T extends React.ElementType<any> = "a">({ as, children$4, className$1, icon, label, subItem, ...rest }: import("./types-7f57039c").MergeElementProps<T, React.PropsWithChildren<{
            as?: T;
            icon?: React.ReactNode;
            label?: React.ReactNode;
            subItem?: boolean;
        }>>): JSX.Element;
        defaultProps: {
            as: string;
        };
    };
    Utilities: ({ children, backToTopLabel, onBackToTopClick, showBackToTopButton, }: React.PropsWithChildren<{
        backToTopLabel?: React.ReactNode;
        onBackToTopClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
        showBackToTopButton?: boolean;
    }>) => JSX.Element;
    SoMe: {
        ({ children$5, soMeSectionProps }: React.PropsWithChildren<{
            soMeSectionProps?: Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, "className" | "style" | "color" | "id" | "lang" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "slot" | "title" | "dir" | "property" | "key" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "draggable" | "hidden" | "placeholder" | "spellCheck" | "translate" | "radioGroup" | "about" | "datatype" | "inlist" | "prefix" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is">;
        }>): JSX.Element;
        componentName: string;
    };
    Base: ({ children, copyrightHolder, copyrightText }: React.PropsWithChildren<{
        copyrightHolder?: React.ReactNode;
        copyrightText?: React.ReactNode;
    }>) => JSX.Element;
};
export { _default as default, FooterBaseProps, FooterBase, FooterSoMeProps, FooterSoMe, FooterUtilitiesProps, FooterUtilities, FooterItemProps, FooterItem, FooterItemGroup, FooterNavigationProps, FooterNavigation, FooterContextProps, FooterContext, FooterProps, Footer };
