/// <reference types="react" />
import React from 'react';
import { A11yRemovalMessage, A11yStatusMessageOptions, UseMultipleSelectionStateChange, UseMultipleSelectionStateChangeOptions, UseMultipleSelectionState } from 'downshift';
interface SelectCustomTheme {
    '--dropdown-background-default'?: string;
    '--dropdown-background-disabled'?: string;
    '--dropdown-border-color-default'?: string;
    '--dropdown-border-color-hover'?: string;
    '--dropdown-border-color-hover-invalid'?: string;
    '--dropdown-border-color-focus'?: string;
    '--dropdown-border-color-invalid'?: string;
    '--dropdown-border-color-disabled'?: string;
    '--dropdown-color-default'?: string;
    '--dropdown-color-disabled'?: string;
    '--focus-outline-color'?: string;
    '--helper-color-default'?: string;
    '--helper-color-invalid'?: string;
    '--menu-divider-color'?: string;
    '--menu-item-background-default'?: string;
    '--menu-item-background-hover'?: string;
    '--menu-item-background-selected'?: string;
    '--menu-item-background-selected-hover'?: string;
    '--menu-item-background-disabled'?: string;
    '--menu-item-color-default'?: string;
    '--menu-item-color-hover'?: string;
    '--menu-item-color-selected'?: string;
    '--menu-item-color-selected-hover'?: string;
    '--menu-item-color-disabled'?: string;
    '--menu-item-icon-color-selected'?: string;
    '--menu-item-icon-color-disabled'?: string;
    '--multiselect-checkbox-background-selected'?: string;
    '--multiselect-checkbox-background-disabled'?: string;
    '--multiselect-checkbox-border-default'?: string;
    '--multiselect-checkbox-border-hover'?: string;
    '--multiselect-checkbox-border-disabled'?: string;
    '--multiselect-checkbox-color-default'?: string;
    '--multiselect-checkbox-color-selected'?: string;
    '--multiselect-checkbox-color-selected-disabled'?: string;
    '--placeholder-color'?: string;
}
type CommonSelectProps<OptionType> = {
    /**
     * When `true`, allows moving from the first item to the last item with Arrow Up, and vice versa using Arrow Down.
     */
    circularNavigation?: boolean;
    /**
     * Additional class names to apply to the select
     */
    className?: string;
    /**
     * Flag for whether the clear selections button should be displayed
     */
    clearable?: boolean;
    /**
     * If `true`, the dropdown will be disabled
     */
    disabled?: boolean;
    /**
     * Function used to generate an ARIA a11y message when an item is selected. See [here](https://github.com/downshift-js/downshift/tree/master/src/hooks/useSelect#geta11yselectionmessage) for more information.
     */
    getA11ySelectionMessage?: (options: A11yStatusMessageOptions<OptionType>) => string;
    /**
     * Function used to generate an ARIA a11y message when the status changes. See [here](https://github.com/downshift-js/downshift/tree/master/src/hooks/useSelect#geta11ystatusmessage) for more information.
     */
    getA11yStatusMessage?: (options: A11yStatusMessageOptions<OptionType>) => string;
    /**
     * A helper text that will be shown below the dropdown
     */
    helper?: React.ReactNode;
    /**
     * An error text that will be shown below the dropdown when `invalid` is true
     */
    error?: React.ReactNode;
    /**
     * Used to generate the first part of the id on the elements
     */
    id?: string;
    /**
     * If `true`, the input and `helper` will be displayed in an invalid state
     */
    invalid?: boolean;
    /**
     * A function used to detect whether an option is disabled
     */
    isOptionDisabled?: (option: OptionType, index: number) => boolean;
    /**
     * The label for the dropdown
     */
    label: React.ReactNode;
    /**
     * Callback function fired when the state is changed
     */
    onBlur?: () => void;
    /**
     * Callback function fired when the component is focused
     */
    onFocus?: () => void;
    /**
     * Sets the data item field that represents the item label
     * E.g. an `optionLabelField` value of `'foo'` and a data item `{ foo: 'Label', bar: 'value' }`, would display `Label` in the menu for that specific item
     */
    optionLabelField?: string;
    /**
     * Array of options that should be shown in the menu
     */
    options: OptionType[];
    /**
     * Short hint displayed in the dropdown before the user enters a value
     */
    placeholder?: string;
    /**
     * If `true`, marks the dropdown as required
     */
    required?: boolean;
    /**
     * Override or extend the root styles applied to the component
     */
    style?: React.CSSProperties;
    /**
     * Custom theme styles
     */
    theme?: SelectCustomTheme;
    /**
     * If `true`, the menu options will be virtualized. This greatly increases performance when there are a lot of options,
     * but screen readers won't be able to know how many options there are.
     */
    virtualized?: boolean;
    /**
     * Sets the number of options that are visible in the menu before it becomes scrollable
     */
    visibleOptions?: number;
    /**
     * Aria-label text for the tooltip
     */
    tooltipLabel?: string;
    /**
     * Aria-label text for the tooltip trigger button
     */
    tooltipButtonLabel?: string;
    /**
     * The text content of the tooltip
     */
    tooltipText?: string;
};
type SingleSelectProps<OptionType> = CommonSelectProps<OptionType> & {
    /**
     * When `true`, enables selecting multiple values
     */
    multiselect?: false;
    /**
     * Value that should be selected when the dropdown is initialized
     */
    defaultValue?: OptionType;
    /**
     * Icon to be shown in the dropdown
     */
    icon?: React.ReactNode;
    /**
     * Callback function fired when the state is changed
     */
    onChange?: (selected: OptionType) => void;
    /**
     * The selected value
     */
    value?: OptionType;
};
type MultiSelectProps<OptionType> = CommonSelectProps<OptionType> & {
    /**
     * When `true`, enables selecting multiple values
     */
    multiselect: true;
    /**
     * The aria-label for the clear button
     */
    clearButtonAriaLabel: string;
    /**
     * Value(s) that should be selected when the dropdown is initialized
     */
    defaultValue?: OptionType[];
    /**
     * Function used to generate an ARIA a11y message when an item is removed. See [here](https://github.com/downshift-js/downshift/tree/master/src/hooks/useMultipleSelection#geta11yremovalmessage) for more information.
     */
    getA11yRemovalMessage?: (options: A11yRemovalMessage<OptionType>) => string;
    /**
     * Callback function fired when the state is changed
     */
    onChange?: (selected: OptionType[]) => void;
    /**
     * The aria-label for the selected item remove button.
     * You can use a special {value} token that will be replaced with the actual item value.
     * E.g. an item with the label Foo and property value of `'Remove ${value}'` would become `aria-label="Remove Foo"`.
     */
    selectedItemRemoveButtonAriaLabel: string;
    /**
     * A label for the selected items that is only visible to screen readers. Can be used to to give screen reader users additional information about the selected item.
     * You can use a special {value} token that will be replaced with the actual item value.
     * E.g. an item with the label Foo and property value of `'Selected item ${value}'` would become `aria-label="Selected item Foo"`.
     */
    selectedItemSrLabel?: string;
    /**
     * The selected value(s)
     */
    value?: OptionType[];
};
type SelectProps<OptionType> = SingleSelectProps<OptionType> | MultiSelectProps<OptionType>;
/**
 * Multi-select state change handler
 * @param type
 * @param activeIndex
 * @param currentActiveIndex
 * @param selectedItemsContainerEl
 */
declare function onMultiSelectStateChange<T>({ type, activeIndex }: UseMultipleSelectionStateChange<T>, currentActiveIndex: any, selectedItemsContainerEl: any): void;
/**
 * Multi-select reducer function
 * @param state
 * @param type
 * @param changes
 * @param controlled
 */
declare function multiSelectReducer<T>(state: UseMultipleSelectionState<T>, { type, changes }: UseMultipleSelectionStateChangeOptions<T>, controlled: boolean): Partial<UseMultipleSelectionState<T>>;
declare const Select: {
    <OptionType>(props: SelectProps<OptionType>): JSX.Element;
    defaultProps: {
        multiselect: boolean;
    };
};
export { SelectCustomTheme, CommonSelectProps, SingleSelectProps, MultiSelectProps, SelectProps, onMultiSelectStateChange, multiSelectReducer, Select };
