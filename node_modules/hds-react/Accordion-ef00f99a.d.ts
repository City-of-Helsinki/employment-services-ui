/// <reference types="react" />
import React from 'react';
interface AccordionCustomTheme {
    '--background-color'?: string;
    '--border-color'?: string;
    '--padding-horizontal'?: string;
    '--padding-vertical'?: string;
    '--header-font-color'?: string;
    '--header-font-size'?: string;
    '--header-line-height'?: string;
    '--button-size'?: string;
    '--button-border-color-hover'?: string;
    '--content-font-size'?: string;
    '--content-line-height'?: string;
}
type CommonAccordionProps = React.PropsWithChildren<{
    /**
     * If `true` border will be drawn around the accordion card.
     */
    border?: false;
    /**
     * Use the card variant if `true`
     */
    card?: false;
    /**
     * Additional class names for accordion
     */
    className?: string;
    /**
     * Heading text.
     */
    heading?: string;
    /**
     * Heading level
     * @default 2
     */
    headingLevel?: number;
    /**
     * The id for the accordion element
     */
    id?: string;
    /**
     * Additional styles
     */
    style?: React.CSSProperties;
    /**
     * Custom theme styles
     */
    theme?: AccordionCustomTheme;
}>;
type CardAccordionProps = Omit<CommonAccordionProps, 'card' | 'border'> & {
    /**
     * If `true` border will be drawn around the accordion card.
     */
    border?: boolean;
    /**
     * Use the card variant if `true`
     */
    card: true;
};
type AccordionProps = CommonAccordionProps | CardAccordionProps;
declare const Accordion: ({ border, card, children, className, heading, headingLevel, id, style, theme, }: AccordionProps) => JSX.Element;
export { AccordionCustomTheme, CommonAccordionProps, CardAccordionProps, AccordionProps, Accordion };
