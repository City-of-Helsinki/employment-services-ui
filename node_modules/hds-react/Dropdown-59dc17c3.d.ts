/// <reference types="react" />
import React from 'react';
type OptionType = {
    [key: string]: any;
};
type DropdownProps = {
    /**
     * Controls the circular keyboard navigation between items. If set to `true`, when first item is highlighted, the Arrow Up will move highlight to the last item, and vice versa using Arrow Down.
     */
    circularNavigation?: boolean;
    /**
     * Additional class names to apply to the dropdown
     */
    className?: string;
    /**
     * Close the menu when the user selects an option
     */
    closeMenuOnSelect?: boolean;
    /**
     * If `true`, the dropdown will be disabled
     */
    disabled?: boolean;
    /**
     * If `true`, the dropdown menu can be filtered
     */
    filterable?: boolean;
    /**
     * Function used to set the `id` prop for menu options (`li`). The returned `string` value will be set a the option `id`
     */
    getItemId?: (index: number) => string;
    /**
     * The helper text content that will be shown below the dropdown
     */
    helper?: string | React.ReactNode;
    /**
     * Hides the label above the dropdown
     */
    hideLabel?: boolean;
    /**
     * Item that should be selected when the dropdown is initialized
     */
    defaultValue?: OptionType;
    /**
     * Item(s) that should be selected when the dropdown is initialized. Use this instead of `defaultValue` when `multiselect` is enabled
     */
    defaultValues?: OptionType[];
    /**
     * Used to generate the first part of the id on the elements.
     * You can override this id with one of your own, provided as a prop, or you can override the id for each element using the `getItemId`, `labelId`, `inputId`, `menuId` and `toggleButtonId` props.
     */
    id?: string;
    /**
     * If `true`, the input and `helper` will be displayed in an invalid state
     */
    invalid?: boolean;
    /**
     * A function used to detect whether an option is disabled ([example](/?path=/story/components-dropdown--disabled-options))
     */
    isOptionDisabled?: (option: OptionType, index: number) => boolean;
    /**
     * Sets the data item field that represents the item label.
     * E.g. an `optionLabelField` value of `'foo'` and a data item `{ foo: 'Label', bar: 'value' }`, would display `Label` in the menu for that specific item
     */
    optionLabelField?: string;
    /**
     * Sets the `id` prop for the label element
     */
    labelId?: string;
    /**
     * The label for the dropdown
     */
    label?: string | React.ReactNode;
    /**
     * Sets the `id` prop for the input element when `filterable` is `true`
     */
    inputId?: string;
    /**
     * Sets the `id` prop for the menu (`ul`)
     */
    menuId?: string;
    /**
     * Enables selecting multiple values if `true`.
     *
     * Note: Using multiselect together with the `filterable` prop is not yet supported. `multiselect` will be ignored if `filterable` is `true`
     */
    multiselect?: boolean;
    /**
     * Callback fired when the state is changed
     */
    onChange?: (selectedItems: OptionType | OptionType[]) => void;
    /**
     * Array of options that should be shown in the menu
     */
    options: OptionType[];
    /**
     * Short hint displayed in the dropdown before the user enters a value
     */
    placeholder?: string;
    /**
     * If `true`, the label is displayed as required
     */
    required?: boolean;
    /**
     * The option(s) that should be selected
     */
    selectedOption?: OptionType | OptionType[];
    /**
     * Override or extend the root styles applied to the component
     */
    style?: React.CSSProperties;
    /**
     * Sets the `id` prop for the toggle button (`button`)
     */
    toggleButtonId?: string;
    /**
     * Sets the number of options that are visible in the menu before it becomes scrollable
     */
    visibleOptions?: number;
};
declare const Dropdown: ({ circularNavigation, className, closeMenuOnSelect, defaultValue, defaultValues, disabled, filterable, getItemId, helper, hideLabel, invalid, isOptionDisabled, label, labelId, id, inputId, menuId, multiselect, onChange, optionLabelField, options, placeholder, required, selectedOption, style, toggleButtonId, visibleOptions, }: DropdownProps) => JSX.Element;
export { DropdownProps, Dropdown };
