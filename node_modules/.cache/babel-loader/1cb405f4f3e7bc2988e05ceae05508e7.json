{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _toArray(arr) {\n  return Array.isArray(arr) ? arr : Array.from(arr);\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash.get';\nimport unified from 'unified';\nimport parser from 'remark-parse';\nvar BLOCK_ELEMENT_TAGS = ['article', 'aside', 'blockquote', 'body', 'button', 'canvas', 'caption', 'col', 'colgroup', 'dd', 'details', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'iframe', 'li', 'map', 'object', 'ol', 'output', 'p', 'pre', 'progress', 'script', 'section', 'style', 'summary', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'tr', 'ul', 'video'];\nvar BLOCK_ELEMENT_REGEX = new RegExp('^<(' + BLOCK_ELEMENT_TAGS.join('|') + ')', 'i'); // [0] === tag, [...] = attribute pairs\n\nvar HTML_EXTRACTOR_REGEX = /([-A-Za-z0-9_]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/g;\nvar SELF_CLOSING_ELEMENT_TAGS = ['area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'];\nvar SELF_CLOSING_ELEMENT_REGEX = new RegExp('^<(' + SELF_CLOSING_ELEMENT_TAGS.join('|') + ')', 'i');\nvar TEXT_AST_TYPES = ['text', 'textNode'];\nvar ATTRIBUTE_TO_JSX_PROP_MAP = {\n  'accept-charset': 'acceptCharset',\n  'accesskey': 'accessKey',\n  'allowfullscreen': 'allowFullScreen',\n  'allowtransparency': 'allowTransparency',\n  'autocomplete': 'autoComplete',\n  'autofocus': 'autoFocus',\n  'autoplay': 'autoPlay',\n  'cellpadding': 'cellPadding',\n  'cellspacing': 'cellSpacing',\n  'charset': 'charSet',\n  'class': 'className',\n  'classid': 'classId',\n  'colspan': 'colSpan',\n  'contenteditable': 'contentEditable',\n  'contextmenu': 'contextMenu',\n  'crossorigin': 'crossOrigin',\n  'enctype': 'encType',\n  'for': 'htmlFor',\n  'formaction': 'formAction',\n  'formenctype': 'formEncType',\n  'formmethod': 'formMethod',\n  'formnovalidate': 'formNoValidate',\n  'formtarget': 'formTarget',\n  'frameborder': 'frameBorder',\n  'hreflang': 'hrefLang',\n  'http-equiv': 'httpEquiv',\n  'inputmode': 'inputMode',\n  'keyparams': 'keyParams',\n  'keytype': 'keyType',\n  'marginheight': 'marginHeight',\n  'marginwidth': 'marginWidth',\n  'maxlength': 'maxLength',\n  'mediagroup': 'mediaGroup',\n  'minlength': 'minLength',\n  'novalidate': 'noValidate',\n  'radiogroup': 'radioGroup',\n  'readonly': 'readOnly',\n  'rowspan': 'rowSpan',\n  'spellcheck': 'spellCheck',\n  'srcdoc': 'srcDoc',\n  'srclang': 'srcLang',\n  'srcset': 'srcSet',\n  'tabindex': 'tabIndex',\n  'usemap': 'useMap'\n};\nvar getType = Object.prototype.toString;\n\nfunction extractDefinitionsFromASTTree(ast, parser) {\n  function reducer(aggregator, node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      aggregator.definitions[node.identifier] = node;\n\n      if (node.type === 'footnoteDefinition') {\n        if (node.children && node.children.length === 1 && node.children[0].type === 'paragraph') {\n          node.children[0].children.unshift({\n            type: 'textNode',\n            value: '[' + node.identifier + ']: '\n          });\n        }\n        /* package the prefix inside the first child */\n\n\n        aggregator.footnotes.push(React.createElement('div', {\n          key: node.identifier,\n          id: node.identifier\n        }, node.value || node.children.map(parser)));\n      }\n    }\n\n    return Array.isArray(node.children) ? node.children.reduce(reducer, aggregator) : aggregator;\n  }\n\n  ;\n  return [ast].reduce(reducer, {\n    definitions: {},\n    footnotes: []\n  });\n}\n\nfunction formExtraPropsForHTMLNodeType() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var ast = arguments[1];\n  var definitions = arguments[2];\n\n  switch (ast.type) {\n    case 'footnoteReference':\n      return _extends({}, props, {\n        href: '#' + ast.identifier\n      });\n\n    case 'image':\n      return _extends({}, props, {\n        title: ast.title,\n        alt: ast.alt,\n        src: ast.url\n      });\n\n    case 'imageReference':\n      return _extends({}, props, {\n        title: get(definitions, '[\\'' + ast.identifier + '\\'].title'),\n        alt: ast.alt,\n        src: get(definitions, '[\\'' + ast.identifier + '\\'].url')\n      });\n\n    case 'link':\n      return _extends({}, props, {\n        title: ast.title,\n        href: ast.url\n      });\n\n    case 'linkReference':\n      return _extends({}, props, {\n        title: get(definitions, '[\\'' + ast.identifier + '\\'].title'),\n        href: get(definitions, '[\\'' + ast.identifier + '\\'].url')\n      });\n\n    case 'list':\n      return _extends({}, props, {\n        start: ast.start\n      });\n\n    case 'tableCell':\n    case 'th':\n      return _extends({}, props, {\n        style: {\n          textAlign: ast.align\n        }\n      });\n  }\n\n  return props;\n}\n\nfunction getHTMLNodeTypeFromASTNodeType(node) {\n  switch (node.type) {\n    case 'break':\n      return 'br';\n\n    case 'delete':\n      return 'del';\n\n    case 'emphasis':\n      return 'em';\n\n    case 'footnoteReference':\n      return 'a';\n\n    case 'heading':\n      return 'h' + node.depth;\n\n    case 'image':\n    case 'imageReference':\n      return 'img';\n\n    case 'inlineCode':\n      return 'code';\n\n    case 'link':\n    case 'linkReference':\n      return 'a';\n\n    case 'list':\n      return node.ordered ? 'ol' : 'ul';\n\n    case 'listItem':\n      return 'li';\n\n    case 'paragraph':\n      return 'p';\n\n    case 'root':\n      return 'div';\n\n    case 'tableHeader':\n      return 'thead';\n\n    case 'tableRow':\n      return 'tr';\n\n    case 'tableCell':\n      return 'td';\n\n    case 'thematicBreak':\n      return 'hr';\n\n    case 'definition':\n    case 'footnoteDefinition':\n    case 'yaml':\n      return null;\n\n    default:\n      return node.type;\n  }\n}\n\nfunction seekCellsAndAlignThemIfNecessary(root, alignmentValues) {\n  var mapper = function mapper(child, index) {\n    if (child.type === 'tableCell') {\n      return _extends({}, child, {\n        align: alignmentValues[index]\n      });\n    } else if (Array.isArray(child.children) && child.children.length) {\n      return child.children.map(mapper);\n    }\n\n    return child;\n  };\n\n  if (Array.isArray(root.children) && root.children.length) {\n    root.children = root.children.map(mapper);\n  }\n\n  return root;\n}\n\nfunction attributeValueToJSXPropValue(key, value) {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      var key = kvPair.slice(0, kvPair.indexOf(':')); // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n\n      var camelCasedKey = key.replace(/(\\-[a-z])/g, function (substr) {\n        return substr[1].toUpperCase();\n      }); // key.length + 1 to skip over the colon\n\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim();\n      return styles;\n    }, {});\n  }\n\n  return value;\n}\n\nfunction isCoalesceableHTML(html) {\n  // ignore block-level elements\n  // ignore self-closing or non-content-bearing elements\n  return html.match(BLOCK_ELEMENT_REGEX) || html.match(SELF_CLOSING_ELEMENT_REGEX) ? false : true;\n}\n\nfunction coalesceInlineHTML(ast) {\n  function coalescer(node, index, siblings) {\n    if (node.type === 'html') {\n      if (!isCoalesceableHTML(node.value)) {\n        return;\n      } else if (node.value.indexOf('<!--') !== -1) {\n        // throw out HTML comments\n        siblings.splice(index, 1);\n      } // are there more html nodes directly after? if so, fold them into the current node\n\n\n      if (index < siblings.length - 1 && siblings[index + 1].type === 'html') {\n        // create a new coalescer context\n        coalescer(siblings[index + 1], index + 1, siblings);\n      }\n\n      var i = index + 1;\n      var end = void 0; // where's the end tag?\n\n      while (end === undefined && i < siblings.length) {\n        if (siblings[i].type !== 'html' || siblings[i].type === 'html' && !isCoalesceableHTML(siblings[i].value)) {\n          i += 1;\n          continue;\n        }\n\n        end = siblings[i];\n      }\n      /* all interim elements now become children of the current node, and we splice them (including end tag)\n         out of the sibling array so they will not be iterated-over by forEach */\n\n\n      node.children = siblings.slice(index + 1, i);\n      siblings.splice(index + 1, i - index);\n\n      var _node$value$match = node.value.match(HTML_EXTRACTOR_REGEX),\n          _node$value$match2 = _toArray(_node$value$match),\n          tag = _node$value$match2[0],\n          attributePairs = _node$value$match2.slice(1); // reassign the current node to whatever its tag is\n\n\n      node.type = tag.toLowerCase(); // make a best-effort conversion to JSX props\n\n      node.props = attributePairs.reduce(function (props, kvPair) {\n        var valueIndex = kvPair.indexOf('=');\n        var key = kvPair.slice(0, valueIndex === -1 ? undefined : valueIndex); // ignoring inline event handlers at this time - they pose enough of a security risk that they're\n        // not worth preserving; there's a reason React calls it \"dangerouslySetInnerHTML\"!\n\n        if (key.indexOf('on') !== 0) {\n          var value = kvPair.slice(key.length + 1); // strip the outermost single/double quote if it exists\n\n          if (value[0] === '\"' || value[0] === '\\'') {\n            value = value.slice(1, value.length - 1);\n          }\n\n          props[ATTRIBUTE_TO_JSX_PROP_MAP[key] || key] = attributeValueToJSXPropValue(key, value) || true;\n        }\n\n        return props;\n      }, {}); // null out .value or astToJSX() will set it as the child\n\n      node.value = null;\n    }\n\n    if (node.children) {\n      node.children.forEach(coalescer);\n    }\n  }\n\n  ;\n  ast.children.forEach(coalescer);\n}\n\nexport function compiler(markdown) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$overrides = _ref.overrides,\n      overrides = _ref$overrides === undefined ? {} : _ref$overrides;\n\n  var definitions = void 0;\n  var footnotes = void 0;\n\n  function astToJSX(ast, index) {\n    /* `this` is the dictionary of definitions */\n    if (TEXT_AST_TYPES.indexOf(ast.type) !== -1) {\n      return ast.value;\n    }\n\n    var key = index || '0';\n\n    if (ast.type === 'code' && ast.value) {\n      var preProps = _extends({}, get(overrides, 'pre.props', {}), {\n        key: key\n      });\n\n      var langClassName = 'lang-' + ast.lang;\n      var codeBaseProps = get(overrides, 'code.props', {});\n\n      var codeProps = _extends({}, codeBaseProps, {\n        className: codeBaseProps.className ? codeBaseProps.className + ' ' + langClassName : langClassName\n      });\n\n      return React.createElement(get(overrides, 'pre.component', 'pre'), preProps, React.createElement(get(overrides, 'code.component', 'code'), codeProps, ast.value));\n    }\n    /* Refers to fenced blocks, need to create a pre:code nested structure */\n\n\n    if (ast.type === 'list' && ast.loose === false) {\n      ast.children = ast.children.map(function (item) {\n        if (item.children.length === 1 && item.children[0].type === 'paragraph') {\n          return _extends({}, item, {\n            children: item.children[0].children\n          });\n        }\n\n        return item;\n      });\n    }\n    /* tight list, remove the paragraph wrapper just inside the listItem */\n\n\n    if (ast.type === 'listItem') {\n      if (ast.checked === true || ast.checked === false) {\n        var liProps = _extends({}, get(overrides, 'li.props', {}), {\n          key: key\n        });\n\n        var inputProps = _extends({}, get(overrides, 'input.props', {}), {\n          key: 'checkbox',\n          type: 'checkbox',\n          checked: ast.checked,\n          readOnly: true\n        });\n\n        return React.createElement(get(overrides, 'li.component', 'li'), liProps, [React.createElement(get(overrides, 'input.component', 'input'), inputProps), ast.children.map(astToJSX)]);\n      }\n      /* gfm task list, need to add a checkbox */\n\n    }\n\n    if (ast.type === 'html') {\n      return React.createElement('div', {\n        key: key,\n        dangerouslySetInnerHTML: {\n          __html: ast.value\n        }\n      });\n    }\n    /* arbitrary HTML, do the gross thing for now */\n\n\n    if (ast.type === 'table') {\n      var tbody = {\n        type: 'tbody',\n        children: []\n      };\n      ast.children = ast.children.reduce(function (children, child, index) {\n        if (index === 0) {\n          /* manually marking the first row as tableHeader since that was removed in remark@4.x; it's important semantically. */\n          child.type = 'tableHeader';\n          children.unshift(seekCellsAndAlignThemIfNecessary(child, ast.align));\n        } else if (child.type === 'tableRow') {\n          tbody.children.push(seekCellsAndAlignThemIfNecessary(child, ast.align));\n        } else if (child.type === 'tableFooter') {\n          children.push(seekCellsAndAlignThemIfNecessary(child, ast.align));\n        }\n\n        return children;\n      }, [tbody]);\n    }\n    /* React yells if things aren't in the proper structure, so need to\n      delve into the immediate children and wrap tablerow(s) in a tbody */\n\n\n    if (ast.type === 'tableFooter') {\n      ast.children = [{\n        type: 'tr',\n        children: ast.children\n      }];\n    }\n    /* React yells if things aren't in the proper structure, so need to\n      delve into the immediate children and wrap the cells in a tablerow */\n\n\n    if (ast.type === 'tableHeader') {\n      ast.children = [{\n        type: 'tr',\n        children: ast.children.map(function (child) {\n          if (child.type === 'tableCell') {\n            child.type = 'th';\n          }\n          /* et voila, a proper table header */\n\n\n          return child;\n        })\n      }];\n    }\n    /* React yells if things aren't in the proper structure, so need to\n      delve into the immediate children and wrap the cells in a tablerow */\n\n\n    if (ast.type === 'footnoteReference') {\n      ast.children = [{\n        type: 'sup',\n        value: ast.identifier\n      }];\n    }\n    /* place the identifier inside a superscript tag for the link */\n\n\n    var htmlNodeType = getHTMLNodeTypeFromASTNodeType(ast);\n\n    if (htmlNodeType === null) {\n      return null;\n    }\n    /* bail out, not convertable to any HTML representation */\n\n\n    var props = _extends({\n      key: key\n    }, ast.props);\n\n    if (Array.isArray(ast.children) && ast.children.length === 1 && ast.children[0].type === 'html') {\n      props.dangerouslySetInnerHTML = {\n        __html: ast.children[0].value\n      };\n      ast.children = null;\n    }\n\n    var override = overrides[htmlNodeType];\n\n    if (override) {\n      if (override.component) {\n        htmlNodeType = override.component;\n      }\n      /* sub out the normal html tag name for the JSX / ReactFactory\n         passed in by the caller */\n\n\n      if (override.props) {\n        props = _extends({}, override.props, props);\n      }\n      /* apply the prop overrides beneath the minimal set that are necessary\n         to have the markdown conversion work as expected */\n\n    }\n    /* their props + our props, with any duplicate keys overwritten by us\n       (necessary evil, file an issue if something comes up that needs\n       extra attention, only props specified in `formExtraPropsForHTMLNodeType`\n       will be overwritten on a key collision) */\n\n\n    var finalProps = formExtraPropsForHTMLNodeType(props, ast, definitions);\n\n    if (ast.children && ast.children.length === 1) {\n      if (TEXT_AST_TYPES.indexOf(ast.children[0].type) !== -1) {\n        ast.children = ast.children[0].value;\n      }\n    }\n    /* solitary text children don't need full parsing or React will add a wrapper */\n\n\n    var children = Array.isArray(ast.children) ? ast.children.map(astToJSX) : ast.children;\n    return React.createElement(htmlNodeType, finalProps, ast.value || children);\n  }\n\n  if (typeof markdown !== 'string') {\n    throw new Error('markdown-to-jsx: the first argument must be\\n                         a string');\n  }\n\n  if (getType.call(overrides) !== '[object Object]') {\n    throw new Error('markdown-to-jsx: options.overrides (second argument property) must be\\n                         undefined or an object literal with shape:\\n                         {\\n                            htmltagname: {\\n                                component: string|ReactComponent(optional),\\n                                props: object(optional)\\n                            }\\n                         }');\n  }\n\n  var remarkAST = unified().data('settings', {\n    footnotes: true,\n    gfm: true,\n    position: false\n  }).use(parser).parse(markdown);\n  var extracted = extractDefinitionsFromASTTree(remarkAST, astToJSX);\n  definitions = extracted.definitions;\n  footnotes = extracted.footnotes;\n  coalesceInlineHTML(remarkAST);\n  var jsx = astToJSX(remarkAST); // discard the root <div> node if there is only one valid initial child\n\n  if (jsx.props.children && jsx.props.children.length === 1) {\n    jsx = jsx.props.children[0];\n  }\n\n  if (footnotes.length) {\n    jsx.props.children.push(React.createElement('footer', {\n      key: 'footnotes'\n    }, footnotes));\n  }\n\n  return jsx;\n}\n;\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n *\n * @param  {String}   options.children   must be a string\n * @param  {Object}   options.options    markdown-to-jsx options (arg 2 of the compiler)\n *\n * @return {ReactElement} the compiled JSX\n */\n\nvar Component = function Component(_ref2) {\n  var children = _ref2.children,\n      options = _ref2.options,\n      props = _objectWithoutProperties(_ref2, ['children', 'options']);\n\n  return compiler(children, options);\n};\n\nComponent.propTypes = {\n  children: PropTypes.string.isRequired,\n  options: PropTypes.object\n};\nexport default Component;","map":{"version":3,"sources":["/Users/juhaylonen/futurice/myHelsinki/tyollisyys/react2/node_modules/markdown-to-jsx/index.esm.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_objectWithoutProperties","obj","keys","indexOf","_toArray","arr","Array","isArray","from","React","PropTypes","get","unified","parser","BLOCK_ELEMENT_TAGS","BLOCK_ELEMENT_REGEX","RegExp","join","HTML_EXTRACTOR_REGEX","SELF_CLOSING_ELEMENT_TAGS","SELF_CLOSING_ELEMENT_REGEX","TEXT_AST_TYPES","ATTRIBUTE_TO_JSX_PROP_MAP","getType","toString","extractDefinitionsFromASTTree","ast","reducer","aggregator","node","type","definitions","identifier","children","unshift","value","footnotes","push","createElement","id","map","reduce","formExtraPropsForHTMLNodeType","props","undefined","href","title","alt","src","url","start","style","textAlign","align","getHTMLNodeTypeFromASTNodeType","depth","ordered","seekCellsAndAlignThemIfNecessary","root","alignmentValues","mapper","child","index","attributeValueToJSXPropValue","split","styles","kvPair","slice","camelCasedKey","replace","substr","toUpperCase","trim","isCoalesceableHTML","html","match","coalesceInlineHTML","coalescer","siblings","splice","end","_node$value$match","_node$value$match2","tag","attributePairs","toLowerCase","valueIndex","forEach","compiler","markdown","_ref","_ref$overrides","overrides","astToJSX","preProps","langClassName","lang","codeBaseProps","codeProps","className","loose","item","checked","liProps","inputProps","readOnly","dangerouslySetInnerHTML","__html","tbody","htmlNodeType","override","component","finalProps","Error","remarkAST","data","gfm","position","use","parse","extracted","jsx","Component","_ref2","options","propTypes","string","isRequired","object"],"mappings":"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","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash.get';\nimport unified from 'unified';\nimport parser from 'remark-parse';\n\nvar BLOCK_ELEMENT_TAGS = ['article', 'aside', 'blockquote', 'body', 'button', 'canvas', 'caption', 'col', 'colgroup', 'dd', 'details', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'iframe', 'li', 'map', 'object', 'ol', 'output', 'p', 'pre', 'progress', 'script', 'section', 'style', 'summary', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'tr', 'ul', 'video'];\nvar BLOCK_ELEMENT_REGEX = new RegExp('^<(' + BLOCK_ELEMENT_TAGS.join('|') + ')', 'i');\n\n// [0] === tag, [...] = attribute pairs\nvar HTML_EXTRACTOR_REGEX = /([-A-Za-z0-9_]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/g;\nvar SELF_CLOSING_ELEMENT_TAGS = ['area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'];\nvar SELF_CLOSING_ELEMENT_REGEX = new RegExp('^<(' + SELF_CLOSING_ELEMENT_TAGS.join('|') + ')', 'i');\nvar TEXT_AST_TYPES = ['text', 'textNode'];\n\nvar ATTRIBUTE_TO_JSX_PROP_MAP = {\n    'accept-charset': 'acceptCharset',\n    'accesskey': 'accessKey',\n    'allowfullscreen': 'allowFullScreen',\n    'allowtransparency': 'allowTransparency',\n    'autocomplete': 'autoComplete',\n    'autofocus': 'autoFocus',\n    'autoplay': 'autoPlay',\n    'cellpadding': 'cellPadding',\n    'cellspacing': 'cellSpacing',\n    'charset': 'charSet',\n    'class': 'className',\n    'classid': 'classId',\n    'colspan': 'colSpan',\n    'contenteditable': 'contentEditable',\n    'contextmenu': 'contextMenu',\n    'crossorigin': 'crossOrigin',\n    'enctype': 'encType',\n    'for': 'htmlFor',\n    'formaction': 'formAction',\n    'formenctype': 'formEncType',\n    'formmethod': 'formMethod',\n    'formnovalidate': 'formNoValidate',\n    'formtarget': 'formTarget',\n    'frameborder': 'frameBorder',\n    'hreflang': 'hrefLang',\n    'http-equiv': 'httpEquiv',\n    'inputmode': 'inputMode',\n    'keyparams': 'keyParams',\n    'keytype': 'keyType',\n    'marginheight': 'marginHeight',\n    'marginwidth': 'marginWidth',\n    'maxlength': 'maxLength',\n    'mediagroup': 'mediaGroup',\n    'minlength': 'minLength',\n    'novalidate': 'noValidate',\n    'radiogroup': 'radioGroup',\n    'readonly': 'readOnly',\n    'rowspan': 'rowSpan',\n    'spellcheck': 'spellCheck',\n    'srcdoc': 'srcDoc',\n    'srclang': 'srcLang',\n    'srcset': 'srcSet',\n    'tabindex': 'tabIndex',\n    'usemap': 'useMap'\n};\n\nvar getType = Object.prototype.toString;\n\nfunction extractDefinitionsFromASTTree(ast, parser) {\n    function reducer(aggregator, node) {\n        if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n            aggregator.definitions[node.identifier] = node;\n\n            if (node.type === 'footnoteDefinition') {\n                if (node.children && node.children.length === 1 && node.children[0].type === 'paragraph') {\n                    node.children[0].children.unshift({\n                        type: 'textNode',\n                        value: '[' + node.identifier + ']: '\n                    });\n                } /* package the prefix inside the first child */\n\n                aggregator.footnotes.push(React.createElement(\n                    'div',\n                    { key: node.identifier, id: node.identifier },\n                    node.value || node.children.map(parser)\n                ));\n            }\n        }\n\n        return Array.isArray(node.children) ? node.children.reduce(reducer, aggregator) : aggregator;\n    };\n\n    return [ast].reduce(reducer, {\n        definitions: {},\n        footnotes: []\n    });\n}\n\nfunction formExtraPropsForHTMLNodeType() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ast = arguments[1];\n    var definitions = arguments[2];\n\n    switch (ast.type) {\n        case 'footnoteReference':\n            return _extends({}, props, {\n                href: '#' + ast.identifier\n            });\n\n        case 'image':\n            return _extends({}, props, {\n                title: ast.title,\n                alt: ast.alt,\n                src: ast.url\n            });\n\n        case 'imageReference':\n            return _extends({}, props, {\n                title: get(definitions, '[\\'' + ast.identifier + '\\'].title'),\n                alt: ast.alt,\n                src: get(definitions, '[\\'' + ast.identifier + '\\'].url')\n            });\n\n        case 'link':\n            return _extends({}, props, {\n                title: ast.title,\n                href: ast.url\n            });\n\n        case 'linkReference':\n            return _extends({}, props, {\n                title: get(definitions, '[\\'' + ast.identifier + '\\'].title'),\n                href: get(definitions, '[\\'' + ast.identifier + '\\'].url')\n            });\n\n        case 'list':\n            return _extends({}, props, {\n                start: ast.start\n            });\n\n        case 'tableCell':\n        case 'th':\n            return _extends({}, props, {\n                style: { textAlign: ast.align }\n            });\n    }\n\n    return props;\n}\n\nfunction getHTMLNodeTypeFromASTNodeType(node) {\n    switch (node.type) {\n        case 'break':\n            return 'br';\n\n        case 'delete':\n            return 'del';\n\n        case 'emphasis':\n            return 'em';\n\n        case 'footnoteReference':\n            return 'a';\n\n        case 'heading':\n            return 'h' + node.depth;\n\n        case 'image':\n        case 'imageReference':\n            return 'img';\n\n        case 'inlineCode':\n            return 'code';\n\n        case 'link':\n        case 'linkReference':\n            return 'a';\n\n        case 'list':\n            return node.ordered ? 'ol' : 'ul';\n\n        case 'listItem':\n            return 'li';\n\n        case 'paragraph':\n            return 'p';\n\n        case 'root':\n            return 'div';\n\n        case 'tableHeader':\n            return 'thead';\n\n        case 'tableRow':\n            return 'tr';\n\n        case 'tableCell':\n            return 'td';\n\n        case 'thematicBreak':\n            return 'hr';\n\n        case 'definition':\n        case 'footnoteDefinition':\n        case 'yaml':\n            return null;\n\n        default:\n            return node.type;\n    }\n}\n\nfunction seekCellsAndAlignThemIfNecessary(root, alignmentValues) {\n    var mapper = function mapper(child, index) {\n        if (child.type === 'tableCell') {\n            return _extends({}, child, {\n                align: alignmentValues[index]\n            });\n        } else if (Array.isArray(child.children) && child.children.length) {\n            return child.children.map(mapper);\n        }\n\n        return child;\n    };\n\n    if (Array.isArray(root.children) && root.children.length) {\n        root.children = root.children.map(mapper);\n    }\n\n    return root;\n}\n\nfunction attributeValueToJSXPropValue(key, value) {\n    if (key === 'style') {\n        return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n\n            var key = kvPair.slice(0, kvPair.indexOf(':'));\n\n            // snake-case to camelCase\n            // also handles PascalCasing vendor prefixes\n            var camelCasedKey = key.replace(/(\\-[a-z])/g, function (substr) {\n                return substr[1].toUpperCase();\n            });\n\n            // key.length + 1 to skip over the colon\n            styles[camelCasedKey] = kvPair.slice(key.length + 1).trim();\n\n            return styles;\n        }, {});\n    }\n\n    return value;\n}\n\nfunction isCoalesceableHTML(html) {\n    // ignore block-level elements\n    // ignore self-closing or non-content-bearing elements\n    return html.match(BLOCK_ELEMENT_REGEX) || html.match(SELF_CLOSING_ELEMENT_REGEX) ? false : true;\n}\n\nfunction coalesceInlineHTML(ast) {\n    function coalescer(node, index, siblings) {\n        if (node.type === 'html') {\n            if (!isCoalesceableHTML(node.value)) {\n                return;\n            } else if (node.value.indexOf('<!--') !== -1) {\n                // throw out HTML comments\n                siblings.splice(index, 1);\n            }\n\n            // are there more html nodes directly after? if so, fold them into the current node\n            if (index < siblings.length - 1 && siblings[index + 1].type === 'html') {\n                // create a new coalescer context\n                coalescer(siblings[index + 1], index + 1, siblings);\n            }\n\n            var i = index + 1;\n            var end = void 0;\n\n            // where's the end tag?\n            while (end === undefined && i < siblings.length) {\n                if (siblings[i].type !== 'html' || siblings[i].type === 'html' && !isCoalesceableHTML(siblings[i].value)) {\n                    i += 1;\n                    continue;\n                }\n\n                end = siblings[i];\n            }\n\n            /* all interim elements now become children of the current node, and we splice them (including end tag)\n               out of the sibling array so they will not be iterated-over by forEach */\n\n            node.children = siblings.slice(index + 1, i);\n            siblings.splice(index + 1, i - index);\n\n            var _node$value$match = node.value.match(HTML_EXTRACTOR_REGEX),\n                _node$value$match2 = _toArray(_node$value$match),\n                tag = _node$value$match2[0],\n                attributePairs = _node$value$match2.slice(1);\n\n            // reassign the current node to whatever its tag is\n\n\n            node.type = tag.toLowerCase();\n\n            // make a best-effort conversion to JSX props\n            node.props = attributePairs.reduce(function (props, kvPair) {\n                var valueIndex = kvPair.indexOf('=');\n                var key = kvPair.slice(0, valueIndex === -1 ? undefined : valueIndex);\n\n                // ignoring inline event handlers at this time - they pose enough of a security risk that they're\n                // not worth preserving; there's a reason React calls it \"dangerouslySetInnerHTML\"!\n\n                if (key.indexOf('on') !== 0) {\n                    var value = kvPair.slice(key.length + 1);\n\n                    // strip the outermost single/double quote if it exists\n                    if (value[0] === '\"' || value[0] === '\\'') {\n                        value = value.slice(1, value.length - 1);\n                    }\n\n                    props[ATTRIBUTE_TO_JSX_PROP_MAP[key] || key] = attributeValueToJSXPropValue(key, value) || true;\n                }\n\n                return props;\n            }, {});\n\n            // null out .value or astToJSX() will set it as the child\n            node.value = null;\n        }\n\n        if (node.children) {\n            node.children.forEach(coalescer);\n        }\n    };\n\n    ast.children.forEach(coalescer);\n}\n\nexport function compiler(markdown) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$overrides = _ref.overrides,\n        overrides = _ref$overrides === undefined ? {} : _ref$overrides;\n\n    var definitions = void 0;\n    var footnotes = void 0;\n\n    function astToJSX(ast, index) {\n        /* `this` is the dictionary of definitions */\n        if (TEXT_AST_TYPES.indexOf(ast.type) !== -1) {\n            return ast.value;\n        }\n\n        var key = index || '0';\n\n        if (ast.type === 'code' && ast.value) {\n            var preProps = _extends({}, get(overrides, 'pre.props', {}), {\n                key: key\n            });\n\n            var langClassName = 'lang-' + ast.lang;\n            var codeBaseProps = get(overrides, 'code.props', {});\n            var codeProps = _extends({}, codeBaseProps, {\n                className: codeBaseProps.className ? codeBaseProps.className + ' ' + langClassName : langClassName\n            });\n\n            return React.createElement(get(overrides, 'pre.component', 'pre'), preProps, React.createElement(get(overrides, 'code.component', 'code'), codeProps, ast.value));\n        } /* Refers to fenced blocks, need to create a pre:code nested structure */\n\n        if (ast.type === 'list' && ast.loose === false) {\n            ast.children = ast.children.map(function (item) {\n                if (item.children.length === 1 && item.children[0].type === 'paragraph') {\n                    return _extends({}, item, {\n                        children: item.children[0].children\n                    });\n                }\n\n                return item;\n            });\n        } /* tight list, remove the paragraph wrapper just inside the listItem */\n\n        if (ast.type === 'listItem') {\n            if (ast.checked === true || ast.checked === false) {\n                var liProps = _extends({}, get(overrides, 'li.props', {}), {\n                    key: key\n                });\n\n                var inputProps = _extends({}, get(overrides, 'input.props', {}), {\n                    key: 'checkbox',\n                    type: 'checkbox',\n                    checked: ast.checked,\n                    readOnly: true\n                });\n\n                return React.createElement(get(overrides, 'li.component', 'li'), liProps, [React.createElement(get(overrides, 'input.component', 'input'), inputProps), ast.children.map(astToJSX)]);\n            } /* gfm task list, need to add a checkbox */\n        }\n\n        if (ast.type === 'html') {\n            return React.createElement('div', { key: key, dangerouslySetInnerHTML: { __html: ast.value } });\n        } /* arbitrary HTML, do the gross thing for now */\n\n        if (ast.type === 'table') {\n            var tbody = { type: 'tbody', children: [] };\n\n            ast.children = ast.children.reduce(function (children, child, index) {\n                if (index === 0) {\n                    /* manually marking the first row as tableHeader since that was removed in remark@4.x; it's important semantically. */\n                    child.type = 'tableHeader';\n                    children.unshift(seekCellsAndAlignThemIfNecessary(child, ast.align));\n                } else if (child.type === 'tableRow') {\n                    tbody.children.push(seekCellsAndAlignThemIfNecessary(child, ast.align));\n                } else if (child.type === 'tableFooter') {\n                    children.push(seekCellsAndAlignThemIfNecessary(child, ast.align));\n                }\n\n                return children;\n            }, [tbody]);\n        } /* React yells if things aren't in the proper structure, so need to\n            delve into the immediate children and wrap tablerow(s) in a tbody */\n\n        if (ast.type === 'tableFooter') {\n            ast.children = [{\n                type: 'tr',\n                children: ast.children\n            }];\n        } /* React yells if things aren't in the proper structure, so need to\n            delve into the immediate children and wrap the cells in a tablerow */\n\n        if (ast.type === 'tableHeader') {\n            ast.children = [{\n                type: 'tr',\n                children: ast.children.map(function (child) {\n                    if (child.type === 'tableCell') {\n                        child.type = 'th';\n                    } /* et voila, a proper table header */\n\n                    return child;\n                })\n            }];\n        } /* React yells if things aren't in the proper structure, so need to\n            delve into the immediate children and wrap the cells in a tablerow */\n\n        if (ast.type === 'footnoteReference') {\n            ast.children = [{ type: 'sup', value: ast.identifier }];\n        } /* place the identifier inside a superscript tag for the link */\n\n        var htmlNodeType = getHTMLNodeTypeFromASTNodeType(ast);\n        if (htmlNodeType === null) {\n            return null;\n        } /* bail out, not convertable to any HTML representation */\n\n        var props = _extends({ key: key }, ast.props);\n\n        if (Array.isArray(ast.children) && ast.children.length === 1 && ast.children[0].type === 'html') {\n            props.dangerouslySetInnerHTML = { __html: ast.children[0].value };\n            ast.children = null;\n        }\n\n        var override = overrides[htmlNodeType];\n        if (override) {\n            if (override.component) {\n                htmlNodeType = override.component;\n            } /* sub out the normal html tag name for the JSX / ReactFactory\n                 passed in by the caller */\n\n            if (override.props) {\n                props = _extends({}, override.props, props);\n            } /* apply the prop overrides beneath the minimal set that are necessary\n                 to have the markdown conversion work as expected */\n        }\n\n        /* their props + our props, with any duplicate keys overwritten by us\n           (necessary evil, file an issue if something comes up that needs\n           extra attention, only props specified in `formExtraPropsForHTMLNodeType`\n           will be overwritten on a key collision) */\n        var finalProps = formExtraPropsForHTMLNodeType(props, ast, definitions);\n\n        if (ast.children && ast.children.length === 1) {\n            if (TEXT_AST_TYPES.indexOf(ast.children[0].type) !== -1) {\n                ast.children = ast.children[0].value;\n            }\n        } /* solitary text children don't need full parsing or React will add a wrapper */\n\n        var children = Array.isArray(ast.children) ? ast.children.map(astToJSX) : ast.children;\n\n        return React.createElement(htmlNodeType, finalProps, ast.value || children);\n    }\n\n    if (typeof markdown !== 'string') {\n        throw new Error('markdown-to-jsx: the first argument must be\\n                         a string');\n    }\n\n    if (getType.call(overrides) !== '[object Object]') {\n        throw new Error('markdown-to-jsx: options.overrides (second argument property) must be\\n                         undefined or an object literal with shape:\\n                         {\\n                            htmltagname: {\\n                                component: string|ReactComponent(optional),\\n                                props: object(optional)\\n                            }\\n                         }');\n    }\n\n    var remarkAST = unified().data('settings', {\n        footnotes: true,\n        gfm: true,\n        position: false\n    }).use(parser).parse(markdown);\n\n    var extracted = extractDefinitionsFromASTTree(remarkAST, astToJSX);\n\n    definitions = extracted.definitions;\n    footnotes = extracted.footnotes;\n\n    coalesceInlineHTML(remarkAST);\n\n    var jsx = astToJSX(remarkAST);\n\n    // discard the root <div> node if there is only one valid initial child\n    if (jsx.props.children && jsx.props.children.length === 1) {\n        jsx = jsx.props.children[0];\n    }\n\n    if (footnotes.length) {\n        jsx.props.children.push(React.createElement(\n            'footer',\n            { key: 'footnotes' },\n            footnotes\n        ));\n    }\n\n    return jsx;\n};\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n *\n * @param  {String}   options.children   must be a string\n * @param  {Object}   options.options    markdown-to-jsx options (arg 2 of the compiler)\n *\n * @return {ReactElement} the compiled JSX\n */\nvar Component = function Component(_ref2) {\n    var children = _ref2.children,\n        options = _ref2.options,\n        props = _objectWithoutProperties(_ref2, ['children', 'options']);\n\n    return compiler(children, options);\n};\n\nComponent.propTypes = {\n    children: PropTypes.string.isRequired,\n    options: PropTypes.object\n};\n\nexport default Component;\n"]},"metadata":{},"sourceType":"module"}